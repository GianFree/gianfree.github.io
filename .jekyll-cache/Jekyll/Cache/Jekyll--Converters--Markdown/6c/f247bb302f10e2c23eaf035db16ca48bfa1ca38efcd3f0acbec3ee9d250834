I"`E<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>

<p>In this session we will introduce the ingredients we need to perform a molecular dynamics simulation.
It is a mesh up of information you can find scattered on different sources. <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup></p>

<h3 id="getting-ready">Getting ready</h3>
<p>For this tutorial, download the following <a href="https://github.com/GianFree/gianfree.github.io/raw/tut2/src_files/tutorial2.tar.gz">source file</a>.
You should know how to untar, but let’s remind it:</p>
<p class="prompt prompt-shell">$ tar xvzf tutorial2.tar.gz</p>

<p>There should be two folders: <code class="language-plaintext highlighter-rouge">alanine-dip/</code> and <code class="language-plaintext highlighter-rouge">bpti/</code>.</p>

<h2 id="overview">Overview</h2>
<p>Let’s recap the so called <strong>MD machinery</strong>.</p>

<p><img class="displayed" src="../../img/tut1/md_machinery.png" alt="" /></p>

<p>In today’s tutorial, we will focus on the files that contain the information
on the system we want to study.</p>

<h2 id="may-the-force-field-be-with-you">May the Force (field) be with you!</h2>

<p>The idea is to solve the Newton’s equations of motion for all the atoms in the
system. For each atom in 1D we can write:</p>

\[m\frac{d^2 x}{dt^2} = -\nabla U\]

<p>We need then to know what the potential \(U\) is. The set of functions and parameters
that composes the \(U\) is called <strong>Force Field</strong> (<strong>ff</strong> from now on).</p>

<p>The idea behind <strong>ffs</strong> is to mimic the experimental behaviour of proteins with a
potential for atoms that has a
feasible computational cost.
There are several force fields available, such as:</p>
<ul>
  <li>CHARMm, AMBER for all-atom simulations;</li>
  <li>Martini for coarse grained simulations.</li>
</ul>

<p>Each ff has its own functional form and its protocol to define parameters. The parameters, in fact, hide under the hood assumptions that make the functional formation viable for simulations. Mixing CHARMm parameters with the AMBER potential,
to mention two of the most popular ffs, will lead you to unreliable results.</p>

<p class="prompt prompt-attention">Do not mix parameters from different force
fields!</p>

<p>Moreover, ff parameters evolve as more data and simulations are gathered.</p>

<p class="prompt prompt-attention">Check for the latest version of force fields!</p>
<p>We will mainly use CHARMm ff (version 36).</p>

<p>In general, each force field has two main parts (we are omitting the dependence
  on the coordinates and parameters that will be clear in the following):
$$ U_{ff} = U_{bonded} + U_{non~bonded} $$</p>

<p>Let’s have a graphical representation.</p>
<p align="center"> <b>Bonded interactions</b> </p>

<p><img class="displayed" src="../../img/tut2/bonded.png" alt="" /></p>

<p align="center"> <b>Non-bonded interactions</b> </p>
<p><img class="displayed" src="../../img/tut2/non_bonded.png" alt="" /></p>

<p>As their name suggest, we can define interactions for covalently bonded atoms as:</p>

\[\begin{align*}
  U_{bonded} &amp; = \sum_{bonds} \frac{1}{2}k_{bond} (r_{ij} - r_0)^2 \\
      &amp; +  \sum_{angles} \frac{1}{2} k_{angle} (\theta_{ijk} - \theta_{0})^2 \\
   &amp; + \sum_{dihedrals} k_{\phi,n} [\cos(n\phi_{ijkl} +\delta_n) +1]\\
   &amp; + \sum_{impropers} k_{improper} (\chi_{i^{*}jkl} - \chi_0)^2
\end{align*}\]

<p>but we have also to take into account non-bonded interactions between molecules and
within molecules:</p>

\[\begin{align*}
  U_{non~bonded} &amp; = \sum_{nb~pairs} \Big[ \frac{q_i q_j}{4\pi\epsilon_0 r_{ij}}
  + \Big(\frac{A_{ij}}{r_{ij}^{12}} - \frac{B_{ij}}{r_{ij}^6}\Big)\Big]\\
\end{align*}\]

<h1 id="alanine-dipeptide">Alanine dipeptide</h1>
<p>Alanine dipeptide is a small peptide usually used to study protein backbone
 dynamics. It consists of an <code class="language-plaintext highlighter-rouge">ALA</code> in the middle equipped with two minimal peptide bonds. The N terminus <em>NH2</em> gains an acetyl group <em>CH3CO</em>, while the the C terminus
 <em>COOH</em> obtains a methylamide <em>CH3NH</em>.</p>

<p><img class="displayed" src="../../img/tut2/alanine_dip.png" alt="" /></p>
<p align="center"> ACE - ALA - NME </p>

<p class="prompt prompt-question">How many carbon atoms are in the alanine dipeptide?<br />
Are C atoms bonded with the same kind of atoms each time they appear?</p>

<p>A <code class="language-plaintext highlighter-rouge">pdb</code> and a <code class="language-plaintext highlighter-rouge">top</code> file for the alanine dipeptide is provided.
Let’s inspect the content of these files.</p>

<p class="prompt prompt-attention">Use Vim! :)</p>

<p>In the same folder you have also a configuration file called <code class="language-plaintext highlighter-rouge">vacuum.namd</code>.
It is required to launch <strong>NAMD</strong> and perform the simulation. It is a <code class="language-plaintext highlighter-rouge">Tcl</code>
script were you can set the parameters of your simulation, the algorithms you want
to use, and the output.
Let’s open it as well.</p>

<p>Let’s run the simulation! It will take few minutes.</p>
<p class="prompt prompt-shell">$ namd2 vacuum.namd &gt; ala_vacuum.log &amp;</p>

<p class="prompt prompt-question">What does &gt; and &amp; do?</p>

<p>Try to use the <code class="language-plaintext highlighter-rouge">tail</code> command:</p>
<p class="prompt prompt-shell">$ tail -f *.log </p>
<p>Use <code class="language-plaintext highlighter-rouge">ctrl-s</code> to stop the shell screen if it is too fast. To resume the scroll,
use <code class="language-plaintext highlighter-rouge">ctrl-q</code>.</p>

<p>After the simulation is completed, load with the <code class="language-plaintext highlighter-rouge">Tk console</code> in <em>VMD</em>
the <code class="language-plaintext highlighter-rouge">pdb</code> and the trajectory.</p>
<p class="prompt prompt-tk">% mol new dip.pdb<br />
% mol addfile file.dcd waitfor all</p>

<p>Let’s compute the dihedral angles \(\phi\), whose definition is
\(C_{i-1}-N_{i}-C\alpha_{i}-C_{i}\), and \(\psi\), dihedral defined by
\(N_{i}-C\alpha_{i}-C_{i}-N_{i+1}\).</p>

<p><strong>Hint</strong>: you <code class="language-plaintext highlighter-rouge">measure</code>,<code class="language-plaintext highlighter-rouge">4</code>, <em>Extension</em>.</p>

<h2 id="coordinates-pdb">Coordinates: PDB</h2>
<p>We have already see a <code class="language-plaintext highlighter-rouge">pdb</code> file few moments ago.</p>

<p><img class="displayed" src="../../img/tut2/pdb.png" alt="" />
Let’s go the <a href="https://www.rcsb.org/">Protein Data Bank website</a> and search for the
structure <code class="language-plaintext highlighter-rouge">4pti</code>.</p>

<p>Let’s give a brief overview of these columns</p>
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">serial</code>: integer associated to each atom;</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">name</code>: <code class="language-plaintext highlighter-rouge">atom name</code> of each atom (see figure below);</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">resname</code>: 3-letter code for protein, it can be a 4-letter code for fancy residues;</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">chain</code>: 1-letter identifier for each chain in a pdb;</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, and  <code class="language-plaintext highlighter-rouge">z</code>: try to guess;</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">occupancy</code>: usually <code class="language-plaintext highlighter-rouge">1.00</code>, it can be less than 1 if the structure is not univocally resolved;</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">beta factor</code>: temperature \(\beta_i = \frac{8\pi^2}{3}~msf_i\), it is related to the flexibility of the residue;</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">element</code>.</p>
  </li>
</ul>

<p>Regarding the atom names, they follow the <em>star</em> convention:
from \(\alpha\) (of the Carbon \(\alpha\)) to \(\beta, \gamma, \delta\)…
<img class="displayed" src="../../img/tut2/his.png" alt="" /></p>
<p align="center"> Histidine, as a constellation.</p>
<p class="prompt prompt-attention">PDB files have a fixed format. Do not
modify them manually if you are unsure of the outcome!</p>

<p>Move the <code class="language-plaintext highlighter-rouge">pdb</code> file from <code class="language-plaintext highlighter-rouge">~/Download/</code> into <code class="language-plaintext highlighter-rouge">QCB_course/bpti/</code>.</p>

<p>Let’s open it (with ViM!). For sake of safety, use:</p>
<p class="prompt prompt-shell">$ vim -R 4pti.pdb</p>

<p>Let’s search the keyword we already know. Type in the <em>Vim</em> <code class="language-plaintext highlighter-rouge">Normal mode</code>:
<code class="language-plaintext highlighter-rouge">/ATOMS </code> (note the white space after the <code class="language-plaintext highlighter-rouge">S</code>).</p>

<p><code class="language-plaintext highlighter-rouge">ATOMS</code>, <code class="language-plaintext highlighter-rouge">HETATM</code> define the rows in which atoms are written. The first is used
for the atoms of the proteins, ligands and water atoms are defined by the latter.</p>

<p>Let go at the beginning of the file (<code class="language-plaintext highlighter-rouge">gg</code> in <em>ViM</em>).
There are a lot of information, most of the are experimental data.
They are characterised by the keywords in the first column.
Some of them will be explained in the next lessons.
Now, go to the first <code class="language-plaintext highlighter-rouge">SEQRES</code> (search within <em>ViM</em>).</p>

<p>Let’s focus on the <code class="language-plaintext highlighter-rouge">SSBOND</code> keyword. In this section, if present, disulfide bonds
are defined.
These are bonds between the sulfur <code class="language-plaintext highlighter-rouge">S</code> atoms of two close cysteins.
Disulfide bonds play an important role in the folding and stability of some proteins,
therefore you have to include them in your future structure.</p>

<p class="prompt prompt-question">Write down the resid of the disulfide bonds.</p>

<p>Load the pdb with <em>VMD</em>, and remove the water from the visualisation.
Visualise in <em>Licorice</em>, if present, aspartic acids, glutammic acid, lysine and arginine.</p>

<p>Visualise the disulfide bridges.</p>
<p class="prompt prompt-question">Does VMD create a link between 2 close sulfur atoms? Is it “real”?</p>

<p>Visualise the protein using <em>Beta</em> as <em>Coloring method</em>.
<img class="displayed" src="../../img/tut2/beta_factor.png" alt="" /></p>
<p class="prompt prompt-question">Does the colour scheme fit with your intuition?</p>

<p>Let’s write a new pdb without the water,  since it will be useful for the <code class="language-plaintext highlighter-rouge">psf</code> file.</p>

<ul>
  <li>
    <p>with <code class="language-plaintext highlighter-rouge">awk</code>;</p>
  </li>
  <li>
    <p>within <em>VMD</em>:</p>
  </li>
</ul>
<p class="prompt prompt-tk">% set prot [atomselect top “protein”]<br />
% prot writepdb only_bpti.pdb</p>

<p>You should have (<strong>not</strong>) successfully create a new <code class="language-plaintext highlighter-rouge">pdb</code> file. Why?</p>

<p><strong>NB</strong>: Usually the water molecules in a <code class="language-plaintext highlighter-rouge">pdb</code> can play an important role in the
protein biological function. In general, it is a good practice to keep them in
your final system.</p>

<h2 id="topology-psf-and-top-in-charmm">Topology: .psf and .top in CHARMm</h2>
<p>Let’s download the latest version of the <a href="https://mackerell.umaryland.edu/charmm_ff.shtml">CHARMm ff</a>
and extract it into our <code class="language-plaintext highlighter-rouge">QCB_course/</code> folder.</p>

<p>From now on, we will use <em>topology</em> for referring to the <code class="language-plaintext highlighter-rouge">top_*</code> files of the
force field, and <em>structure</em> for the <code class="language-plaintext highlighter-rouge">psf</code> file.</p>

<p><img class="displayed" src="../../img/tut2/top_psf.png" alt="" /></p>
<p align="center"> <b>Topology file</b>: a collection of bricks.
<b>PSF file</b>: a subset of the top file arranged in a particular fashion.</p>

<p>The idea is to use the <code class="language-plaintext highlighter-rouge">top</code> file to construct the <code class="language-plaintext highlighter-rouge">psf</code> of our system.</p>

<p>First of all, let’s <em>list</em> all the file inside this folder.
As you can see, the topology files are divided into categories:
<em>prot</em>, <em>lipid</em>, <em>na</em>…</p>

<p>Open the <code class="language-plaintext highlighter-rouge">top_all36_prot.rtf</code> (again with <em>ViM</em>) in a read-only mode.</p>

<p>You will see a first part with the <code class="language-plaintext highlighter-rouge">MASS</code> definition, then the <code class="language-plaintext highlighter-rouge">RESI</code> keywords, and eventually the <code class="language-plaintext highlighter-rouge">PRES</code> keywords.</p>

<p>This <code class="language-plaintext highlighter-rouge">top</code> file is like a dictionary, with all the possible words (<code class="language-plaintext highlighter-rouge">RESI</code>) you can
use in your <em>sentence</em> (i.e. <em>system</em>).</p>

<p>The <code class="language-plaintext highlighter-rouge">PRES</code> are the so-called <em>patches</em> and they allow us to modify some residue if
you have a different protonation state, want to combine two residues, add a terminus…</p>

<h1 id="psf">PSF</h1>
<p>The <code class="language-plaintext highlighter-rouge">PSF</code> file contains the information of your system structure and the charge
information.</p>

<p>Each segment of the system not covalently bound to others must have a separate
psf file. For a single-chain protein in solution is trivial. You have also to write
 different <code class="language-plaintext highlighter-rouge">psf</code> if your system consists of several units, i.e. a multimer.</p>

<p>To write a <code class="language-plaintext highlighter-rouge">psf</code> file, we will use <em>VMD</em> with the <em>Tk console</em>.
You can write it as a script and load it in the tk console.</p>

<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load the namespace we need</span>
package require psfgen
<span class="c1"># read the information from the topology file</span>
topology _correct_path_to_what_top_file_to_use?
<span class="c1"># build the protein segment with name BPTI</span>
segment BPTI <span class="p">{</span>
pdb _yours_.pdb
<span class="c1">#autoregenerate angles and dihedrals by default, NTER CTER</span>
<span class="p">}</span>
# Write down the patches we need to apply <span class="p">(</span>What patches?<span class="p">)</span>
patch _Patchname_ _segmentName_:_resid_ _segmentName_:resid
patch _Patchname_ _segmentName_:_resid_ _segmentName_:resid
patch _Patchname_ _segmentName_:_resid_ _segmentName_:resid
<span class="c1"># using alias due to different atom name in pdb vs charmmff  </span>
pdbalias atom ILE CD1 CD
<span class="c1"># readind the coordinates</span>
coordpdb _yours_.pdb BPTI <span class="p">;</span><span class="c1"># write the segname!!!!!</span>
<span class="c1"># guess missing coordinates: are there missing atoms?</span>
guesscoord
<span class="c1"># write the structure and coordinate files</span>
writepsf out.psf
writepdb out.pdb
</code></pre></div></div>
<p>If there are no errors, load first a <em>new</em> molecule with the <code class="language-plaintext highlighter-rouge">psf</code> and then the
<code class="language-plaintext highlighter-rouge">pdb</code> file.</p>

<p class="prompt prompt-question">Check the N-ter and C-ter with respect to the patches in the top file.</p>

<p>You can also use <em>Extension -&gt; Autopsf</em> to generate the psf file, and most of the
things will run behind the scene. ;)</p>

<p>To check whether the psf is ok, we can also run a small minimisation.</p>

<p>NAMD used an improved version of the conjugate gradient.
The aim of the minimisation is two-fold:</p>
<ol>
  <li>to remove the steric clashes that can be present when building a system adding elements;</li>
  <li>to <em>move</em> your structure into the ideal one provided by the topology file, with equilibrium distances, angles…</li>
</ol>

<p>To launch the minimisation, use the <code class="language-plaintext highlighter-rouge">minimise.namd</code> that have to be completed and launch it with:</p>
<p class="prompt prompt-shell">$ namd2 minimise.namd &gt; bpti_min.log&amp;</p>

<p><strong>NB</strong>: with a single core it takes &gt;30min for 1kk steps.</p>

<p>Load the trajectory and have fun.</p>

<h1 id="further-notes">Further Notes</h1>
<ol>
  <li><em>PSFGen user guide</em>, already in your computer in the <em>VMD</em> installation folder
(plugin subfolder).</li>
</ol>

<hr />
<h1 id="notes">Notes</h1>
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>No reference at the moment. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET