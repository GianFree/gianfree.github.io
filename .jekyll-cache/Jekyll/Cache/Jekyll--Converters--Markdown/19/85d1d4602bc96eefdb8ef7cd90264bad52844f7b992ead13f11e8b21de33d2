I"÷)<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>

<p>Most of the scripts are taken from the MDAnaysis github repository.
ASAP I will put the link, but a search will show you all the sources.</p>

<h1 id="introduction">Introduction</h1>

<p>After the simulation is completed, we need to analyse the trajectory.</p>

<p>There is plenty of tools you can use to perform the analysis.</p>

<p>Of course, VMD and <code class="language-plaintext highlighter-rouge">Tcl</code> scripting with the built-in functions of VMD, almost independent of the file format. Another option is to use Gromacsâ€™ analysis tools, which require a specific format of the trajectory.</p>

<p>Today we will use Python as programming language, and the libraries <code class="language-plaintext highlighter-rouge">MDAnalysis</code> and <code class="language-plaintext highlighter-rouge">prody</code>. As usual, there are several options in the same Python environment</p>
<ol>
  <li>MDtraj</li>
  <li>PyEmma</li>
  <li>othersâ€¦</li>
</ol>

<p>You can also use <code class="language-plaintext highlighter-rouge">R</code> and the package <code class="language-plaintext highlighter-rouge">Bio3D</code>.</p>

<p>Todayâ€™s tutorial is a mash-up of different tutorial available online.</p>

<p><strong>CAVEAT</strong>: the terminology will likely be inexact. Let me know if you find any bugs and/or wrong information.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<h1 id="mdanalysis">MDAnalysis</h1>

<p>If you are interest in the project, I link <a href="https://www.mdanalysis.org/">here</a> the link to its website. The package is in development, with stable releases, and you can also contribute via <a href="https://github.com/MDAnalysis/mdanalysis">Github</a> with issues or pull request.</p>

<p>First of all we need to import the package:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">MDAnalysis</span> <span class="k">as</span> <span class="n">mda</span>
<span class="n">mda</span><span class="p">.</span><span class="n">__version__</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'0.19.2'
</code></pre></div></div>

<p>In order to deal with the trajectory, or with a single pdb file, we need to create a <code class="language-plaintext highlighter-rouge">Universe</code>.
As for VMD, this <code class="language-plaintext highlighter-rouge">Universe</code> requires a <em>topology</em> and a <em>coordinate</em> file.</p>

<p>Letâ€™s first define the two files and then letâ€™s create the <code class="language-plaintext highlighter-rouge">Universe</code>.
%ls</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PSF</span> <span class="o">=</span> <span class="s">'adk_equilibrium/adk4AKE.psf'</span>
<span class="n">eqDCD</span> <span class="o">=</span> <span class="s">'adk_equilibrium/1ake_007-nowater-core-dt240ps.dcd'</span>

<span class="n">u</span> <span class="o">=</span> <span class="n">mda</span><span class="p">.</span><span class="n">Universe</span><span class="p">(</span><span class="n">PSF</span><span class="p">,</span> <span class="n">eqDCD</span><span class="p">)</span>
</code></pre></div></div>

<p>What is <code class="language-plaintext highlighter-rouge">u</code>?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">u</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Universe with 3341 atoms&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">u</span><span class="p">.</span><span class="n">trajectory</span><span class="p">.</span><span class="n">n_frames</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4187
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">u</span><span class="p">.</span><span class="n">atoms</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AtomGroup with 3341 atoms&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">u</span><span class="p">.</span><span class="n">atoms</span><span class="p">.</span><span class="n">dimensions</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([85.53471, 85.53471, 85.53471, 90.     , 90.     , 90.     ],
      dtype=float32)
</code></pre></div></div>

<h2 id="selecting-atoms">Selecting atoms</h2>

<p>It is possible to select only a subset of atoms.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alanines</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'resname ALA'</span><span class="p">)</span>
<span class="n">alanines</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AtomGroup with 190 atoms&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alanines</span><span class="p">.</span><span class="n">resids</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([  8,   8,   8,   8,   8,   8,   8,   8,   8,   8,  11,  11,  11,
        11,  11,  11,  11,  11,  11,  11,  17,  17,  17,  17,  17,  17,
        17,  17,  17,  17,  37,  37,  37,  37,  37,  37,  37,  37,  37,
        37,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  49,  49,
        49,  49,  49,  49,  49,  49,  49,  49,  55,  55,  55,  55,  55,
        55,  55,  55,  55,  55,  66,  66,  66,  66,  66,  66,  66,  66,
        66,  66,  73,  73,  73,  73,  73,  73,  73,  73,  73,  73,  93,
        93,  93,  93,  93,  93,  93,  93,  93,  93,  95,  95,  95,  95,
        95,  95,  95,  95,  95,  95,  99,  99,  99,  99,  99,  99,  99,
        99,  99,  99, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
       176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 186, 186, 186,
       186, 186, 186, 186, 186, 186, 186, 188, 188, 188, 188, 188, 188,
       188, 188, 188, 188, 194, 194, 194, 194, 194, 194, 194, 194, 194,
       194, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 207, 207,
       207, 207, 207, 207, 207, 207, 207, 207])
</code></pre></div></div>

<p>The information stored in the <code class="language-plaintext highlighter-rouge">universe</code> are numpy array. So you can apply all the modules in numpyu</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">alanines</span><span class="p">.</span><span class="n">resids</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([  8,  11,  17,  37,  38,  49,  55,  66,  73,  93,  95,  99, 127,
       176, 186, 188, 194, 203, 207])
</code></pre></div></div>

<p>You can also use wildcards in the <code class="language-plaintext highlighter-rouge">select_atoms</code> string, or use the slicing.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carbons</span> <span class="o">=</span> <span class="n">u</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name C*'</span><span class="p">)</span>
<span class="n">carbons</span><span class="p">.</span><span class="n">names</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['CA', 'CB', 'CG', ..., 'C', 'C', 'CA'], dtype=object)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carbons</span><span class="p">[:</span><span class="mi">10</span><span class="p">].</span><span class="n">names</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['CA', 'CB', 'CG', 'CE', 'C', 'CA', 'CB', 'CG', 'CD', 'CZ'],
      dtype=object)
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">carbons</code> and <code class="language-plaintext highlighter-rouge">carbons[:10]</code> are Atomgroup.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">carbons</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AtomGroup with 1040 atoms&gt;
</code></pre></div></div>

<h2 id="rmsd">RMSD</h2>

<p>In order to establish equilibration, the first thing to check is equilibration.</p>

<p>I remind you that the RMSD is defined as
\(RMSD(t) = \sqrt{\frac{\sum_i m_i(\vec{r}_i(t) - \vec{r}_i(t_0))^2}{\sum_i m_i}}\)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">u</span><span class="p">.</span><span class="n">trajectory</span><span class="p">.</span><span class="n">frame</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
</code></pre></div></div>

<h3 id="the-hard-way">The hard way</h3>

<p>We want to compute RMSD. There is a built-in function in <code class="language-plaintext highlighter-rouge">MDAnalysis</code>, called <code class="language-plaintext highlighter-rouge">rmsd</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">MDAnalysis.analysis.rms</span> <span class="kn">import</span> <span class="n">rmsd</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PBD_closed</span> <span class="o">=</span> <span class="s">'adk_equilibrium/adk_closed.pdb'</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ref</span> <span class="o">=</span> <span class="n">mda</span><span class="p">.</span><span class="n">Universe</span><span class="p">(</span><span class="n">PSF</span><span class="p">,</span> <span class="n">PDB_closed</span><span class="p">)</span>
<span class="n">ref</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Universe with 3341 atoms&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mobile</span> <span class="o">=</span> <span class="n">mda</span><span class="p">.</span><span class="n">Universe</span><span class="p">(</span><span class="n">PSF</span><span class="p">,</span> <span class="n">eqDCD</span><span class="p">)</span>     <span class="c1"># we use the first frame
</span><span class="n">mobile</span><span class="p">.</span><span class="n">trajectory</span><span class="p">.</span><span class="n">frame</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
</code></pre></div></div>

<p>Letâ€™s compute the rmsd.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rmsd</span><span class="p">(</span><span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">).</span><span class="n">positions</span><span class="p">,</span> <span class="n">ref</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">).</span><span class="n">positions</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>29.017277853848036
</code></pre></div></div>

<p>Letâ€™s visualise the two structures in VMD. They do not look so different. Moreover they have the same conformation (closed).</p>

<p>Probably we should investigate better how <code class="language-plaintext highlighter-rouge">rmsd</code> works.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">help</span><span class="p">(</span><span class="n">rmsd</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Help on function rmsd in module MDAnalysis.analysis.rms:

rmsd(a, b, weights=None, center=False, superposition=False)
    Returns RMSD between two coordinate sets `a` and `b`.

    `a` and `b` are arrays of the coordinates of N atoms of shape
    :math:`N times 3` as generated by, e.g.,
    :meth:`MDAnalysis.core.groups.AtomGroup.positions`.

    Note
    ----
    If you use trajectory data from simulations performed under **periodic
    boundary conditions** then you *must make your molecules whole* before
    performing RMSD calculations so that the centers of mass of the mobile and
    reference structure are properly superimposed.


    Parameters
    ----------
    a : array_like
        coordinates to align to `b`
    b : array_like
        coordinates to align to (same shape as `a`)
    weights : array_like (optional)
        1D array with weights, use to compute weighted average
    center : bool (optional)
        subtract center of geometry before calculation. With weights given
        compute weighted average as center.
    superposition : bool (optional)
        perform a rotational and translational superposition with the fast QCP
        algorithm [Theobald2005]_ before calculating the RMSD; implies
        ``center=True``.

    Returns
    -------
    rmsd : float
        RMSD between `a` and `b`

    Notes
    -----
    The RMSD :math:`\rho(t)` as a function of time is calculated as

    .. math::

       \rho(t) = \sqrt{\frac{1}{N} \sum_{i=1}^N w_i \left(\mathbf{x}_i(t)
                                - \mathbf{x}_i^{\text{ref}}\right)^2}

    It is the Euclidean distance in configuration space of the current
    configuration (possibly after optimal translation and rotation) from a
    reference configuration divided by :math:`1/\sqrt{N}` where :math:`N` is
    the number of coordinates.

    The weights :math:`w_i` are calculated from the input weights
    `weights` :math:`w'_i` as relative to the mean:

    .. math::

       w_i = \frac{w'_i}{\langle w' \rangle}


    Example
    -------
    &gt;&gt;&gt; u = Universe(PSF,DCD)
    &gt;&gt;&gt; bb = u.select_atoms('backbone')
    &gt;&gt;&gt; A = bb.positions.copy()  # coordinates of first frame
    &gt;&gt;&gt; u.trajectory[-1]         # forward to last frame
    &gt;&gt;&gt; B = bb.positions.copy()  # coordinates of last frame
    &gt;&gt;&gt; rmsd(A, B, center=True)
    3.9482355416565049

    .. versionchanged: 0.8.1
       *center* keyword added
    .. versionchanged: 0.14.0
       *superposition* keyword added
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Removing translations
</span><span class="n">rmsd</span><span class="p">(</span><span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">).</span><span class="n">positions</span><span class="p">,</span> <span class="n">ref</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">).</span><span class="n">positions</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>22.39150433851966
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Removing the rotation
</span><span class="n">rmsd</span><span class="p">(</span><span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">).</span><span class="n">positions</span><span class="p">,</span> <span class="n">ref</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">).</span><span class="n">positions</span><span class="p">,</span>
     <span class="n">center</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">superposition</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.8181973717315183
</code></pre></div></div>

<p>We are usually interested in the RMSD during all the trajectory.</p>

<p>Letâ€™s do that!</p>

<p>The <strong>idea</strong> is to loop over the trajectory. The positions of our selection are updated as me move along the trajectory.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mobile_selection</span> <span class="o">=</span> <span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'protein and name CA'</span><span class="p">)</span>
<span class="n">ref_selection</span> <span class="o">=</span> <span class="n">ref</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'protein and name CA'</span><span class="p">)</span>

<span class="k">for</span> <span class="n">ts</span> <span class="ow">in</span> <span class="n">mobile</span><span class="p">.</span><span class="n">trajectory</span><span class="p">[:</span><span class="mi">10</span><span class="p">]:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">ts</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt; Timestep 0 with unit cell dimensions [85.53471 85.53471 85.53471 90.      90.      90.     ] &gt;
&lt; Timestep 1 with unit cell dimensions [85.69929 85.69929 85.69929 90.      90.      90.     ] &gt;
&lt; Timestep 2 with unit cell dimensions [85.61096 85.61096 85.61096 90.      90.      90.     ] &gt;
&lt; Timestep 3 with unit cell dimensions [85.58586 85.58586 85.58586 90.      90.      90.     ] &gt;
&lt; Timestep 4 with unit cell dimensions [85.6257 85.6257 85.6257 90.     90.     90.    ] &gt;
&lt; Timestep 5 with unit cell dimensions [85.66024 85.66024 85.66024 90.      90.      90.     ] &gt;
&lt; Timestep 6 with unit cell dimensions [85.61478 85.61478 85.61478 90.      90.      90.     ] &gt;
&lt; Timestep 7 with unit cell dimensions [85.636696 85.636696 85.636696 90.       90.       90.      ] &gt;
&lt; Timestep 8 with unit cell dimensions [85.63573 85.63573 85.63573 90.      90.      90.     ] &gt;
&lt; Timestep 9 with unit cell dimensions [85.621025 85.621025 85.621025 90.       90.       90.      ] &gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">computedRMSD</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">ts</span> <span class="ow">in</span> <span class="n">mobile</span><span class="p">.</span><span class="n">trajectory</span><span class="p">[:]:</span>
    <span class="n">computedRMSD</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">rmsd</span><span class="p">(</span><span class="n">mobile_selection</span><span class="p">.</span><span class="n">positions</span><span class="p">,</span> <span class="n">ref_selection</span><span class="p">.</span><span class="n">positions</span><span class="p">,</span>
                             <span class="n">center</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">superposition</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">computedRMSD</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="output_39_0.png" alt="png" /></p>

<p>On the <code class="language-plaintext highlighter-rouge">x-axis</code> we have the indices of the list. Of course we can easily modify the label if we know what is the timestep of the simulation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mobile</span><span class="p">.</span><span class="n">trajectory</span><span class="p">.</span><span class="n">dt</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>240.00000489999024
</code></pre></div></div>

<h3 id="the-easy-way">The easy way</h3>

<p>We can take advantage of more built-in functions in MDAnalysis.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">MDAnalysis.analysis.base</span> <span class="kn">import</span> <span class="n">analysis_class</span>

<span class="n">help</span><span class="p">(</span><span class="n">analysis_class</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Help on function analysis_class in module MDAnalysis.analysis.base:

analysis_class(function)
    Transform a function operating on a single frame to an analysis class

    For an usage in a library we recommend the following style:

    &gt;&gt;&gt; def rotation_matrix(mobile, ref):
    &gt;&gt;&gt;     return mda.analysis.align.rotation_matrix(mobile, ref)[0]
    &gt;&gt;&gt; RotationMatrix = analysis_class(rotation_matrix)

    It can also be used as a decorator:

    &gt;&gt;&gt; @analysis_class
    &gt;&gt;&gt; def RotationMatrix(mobile, ref):
    &gt;&gt;&gt;     return mda.analysis.align.rotation_matrix(mobile, ref)[0]

    &gt;&gt;&gt; rot = RotationMatrix(u.trajectory, mobile, ref).run(step=2)
    &gt;&gt;&gt; print(rot.results)
</code></pre></div></div>

<p>Letâ€™s assume we have a function that works only on one frame.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">my_rmsd</span><span class="p">(</span><span class="n">mobile_ag</span><span class="p">,</span> <span class="n">ref_ag</span><span class="p">):</span>
    <span class="s">'''We always want to align the trajectory to the reference frame. So we set
        center = True
        superposition = True
    '''</span>
    <span class="k">return</span> <span class="n">rmsd</span><span class="p">(</span><span class="n">mobile_ag</span><span class="p">.</span><span class="n">positions</span><span class="p">,</span> <span class="n">ref_ag</span><span class="p">.</span><span class="n">positions</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">superposition</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_rmsd</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;function __main__.my_rmsd(mobile_ag, ref_ag)&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_rmsd</span><span class="p">(</span><span class="n">mobile_ag</span><span class="o">=</span><span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">),</span> <span class="n">ref_ag</span><span class="o">=</span><span class="n">ref</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.8181973717315183
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">analysis_class</span>
<span class="k">def</span> <span class="nf">my_rmsd</span><span class="p">(</span><span class="n">mobile_ag</span><span class="p">,</span> <span class="n">ref_ag</span><span class="p">):</span>
    <span class="s">'''We always want to align the trajectory to the reference frame. So we set
        center = True
        superposition = True
    '''</span>
    <span class="n">mobile_pos</span> <span class="o">=</span> <span class="n">mobile_ag</span><span class="p">.</span><span class="n">positions</span>
    <span class="k">return</span> <span class="n">rmsd</span><span class="p">(</span><span class="n">mobile_pos</span><span class="p">,</span> <span class="n">ref_ag</span><span class="p">.</span><span class="n">positions</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">superposition</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_rmsd</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MDAnalysis.analysis.base.analysis_class.&lt;locals&gt;.WrapperClass
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">my_rmsd</span><span class="p">(</span><span class="n">mobile</span><span class="p">.</span><span class="n">trajectory</span><span class="p">,</span> <span class="n">mobile_ag</span><span class="o">=</span><span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">),</span> <span class="n">ref_ag</span><span class="o">=</span><span class="n">ref</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">)).</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">results</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[&lt;matplotlib.lines.Line2D at 0x7f01b9da0c18&gt;]
</code></pre></div></div>

<p><img src="output_52_1.png" alt="png" /></p>

<p>This is a nice way to extend a function that works on a frame to the whole trajectory. Of course we can do better, if there is already something that does that for us ;)</p>

<h3 id="the-lazy-way">The lazy way</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">MDAnalysis.analysis.rms</span> <span class="kn">import</span> <span class="n">RMSD</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">help</span><span class="p">(</span><span class="n">RMSD</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Help on class RMSD in module MDAnalysis.analysis.rms:

class RMSD(MDAnalysis.analysis.base.AnalysisBase)
 |  Class to perform RMSD analysis on a trajectory.
 |
 |  The RMSD will be computed for two groups of atoms and all frames in the
 |  trajectory belonging to `atomgroup`. The groups of atoms are obtained by
 |  applying the selection selection `select` to the changing `atomgroup` and
 |  the fixed `reference`.
 |
 |  Note
 |  ----
 |  If you use trajectory data from simulations performed under **periodic
 |  boundary conditions** then you *must make your molecules whole* before
 |  performing RMSD calculations so that the centers of mass of the selected
 |  and reference structure are properly superimposed.
 |
 |
 |  Run the analysis with :meth:`RMSD.run`, which stores the results
 |  in the array :attr:`RMSD.rmsd`.
 |
 |  Method resolution order:
 |      RMSD
 |      MDAnalysis.analysis.base.AnalysisBase
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, atomgroup, reference=None, select='all', groupselections=None, filename='rmsd.dat', weights=None, tol_mass=0.1, ref_frame=0, **kwargs)
 |      Parameters
 |      ----------
 |      atomgroup : AtomGroup or Universe
 |          Group of atoms for which the RMSD is calculated. If a trajectory is
 |          associated with the atoms then the computation iterates over the
 |          trajectory.
 |      reference : AtomGroup or Universe (optional)
 |          Group of reference atoms; if ``None`` then the current frame of
 |          `atomgroup` is used.
 |      select : str or dict or tuple (optional)
 |          The selection to operate on; can be one of:
 |
 |          1. any valid selection string for
 |             :meth:`~MDAnalysis.core.groups.AtomGroup.select_atoms` that
 |             produces identical selections in `atomgroup` and `reference`; or
 |
 |          2. a dictionary ``{'mobile': sel1, 'reference': sel2}`` where *sel1*
 |             and *sel2* are valid selection strings that are applied to
 |             `atomgroup` and `reference` respectively (the
 |             :func:`MDAnalysis.analysis.align.fasta2select` function returns such
 |             a dictionary based on a ClustalW_ or STAMP_ sequence alignment); or
 |
 |          3. a tuple ``(sel1, sel2)``
 |
 |          When using 2. or 3. with *sel1* and *sel2* then these selection strings
 |          are applied to `atomgroup` and `reference` respectively and should
 |          generate *groups of equivalent atoms*.  *sel1* and *sel2* can each also
 |          be a *list of selection strings* to generate a
 |          :class:`~MDAnalysis.core.groups.AtomGroup` with defined atom order as
 |          described under :ref:`ordered-selections-label`).
 |
 |      groupselections : list (optional)
 |          A list of selections as described for `select`, with the difference
 |          that these selections are *always applied to the full universes*,
 |          i.e., ``atomgroup.universe.select_atoms(sel1)`` and
 |          ``reference.universe.select_atoms(sel2)``. Each selection describes
 |          additional RMSDs to be computed *after the structures have been
 |          superimposed* according to `select`. No additional fitting is
 |          performed.The output contains one additional column for each
 |          selection.
 |
 |          .. Note:: Experimental feature. Only limited error checking
 |                    implemented.
 |      filename : str (optional)
 |          write RMSD into file with :meth:`RMSD.save`
 |
 |          .. deprecated:; 0.19.0
 |             `filename` will be removed together with :meth:`save` in 1.0.
 |
 |      weights : {"mass", ``None``} or array_like (optional)
 |           choose weights. With ``"mass"`` uses masses as weights; with ``None``
 |           weigh each atom equally. If a float array of the same length as
 |           `atomgroup` is provided, use each element of the `array_like` as a
 |           weight for the corresponding atom in `atomgroup`.
 |      tol_mass : float (optional)
 |           Reject match if the atomic masses for matched atoms differ by more
 |           than `tol_mass`.
 |      ref_frame : int (optional)
 |           frame index to select frame from `reference`
 |      verbose : bool (optional)
 |           Show detailed progress of the calculation if set to ``True``; the
 |           default is ``False``.
 |
 |      Raises
 |      ------
 |      SelectionError
 |           If the selections from `atomgroup` and `reference` do not match.
 |      TypeError
 |           If `weights` is not of the appropriate type; see also
 |           :func:`MDAnalysis.lib.util.get_weights`
 |      ValueError
 |           If `weights` are not compatible with `atomgroup` (not the same
 |           length) or if it is not a 1D array (see
 |           :func:`MDAnalysis.lib.util.get_weights`).
 |
 |           A :exc:`ValueError` is also raised if `weights` are not compatible
 |           with `groupselections`: only equal weights (``weights=None``) or
 |           mass-weighted (``weights="mass"``) are supported for additional
 |           `groupselections`.
 |
 |      Notes
 |      -----
 |      The root mean square deviation :math:`\rho(t)` of a group of :math:`N`
 |      atoms relative to a reference structure as a function of time is
 |      calculated as
 |
 |      .. math::
 |
 |         \rho(t) = \sqrt{\frac{1}{N} \sum_{i=1}^N w_i \left(\mathbf{x}_i(t)
 |                                  - \mathbf{x}_i^{\text{ref}}\right)^2}
 |
 |      The weights :math:`w_i` are calculated from the input weights `weights`
 |      :math:`w'_i` as relative to the mean of the input weights:
 |
 |      .. math::
 |
 |         w_i = \frac{w'_i}{\langle w' \rangle}
 |
 |      The selected coordinates from `atomgroup` are optimally superimposed
 |      (translation and rotation) on the `reference` coordinates at each time step
 |      as to minimize the RMSD. Douglas Theobald's fast QCP algorithm
 |      [Theobald2005]_ is used for the rotational superposition and to calculate
 |      the RMSD (see :mod:`MDAnalysis.lib.qcprot` for implementation details).
 |
 |      The class runs various checks on the input to ensure that the two atom
 |      groups can be compared. This includes a comparison of atom masses (i.e.,
 |      only the positions of atoms of the same mass will be considered to be
 |      correct for comparison). If masses should not be checked, just set
 |      `tol_mass` to a large value such as 1000.
 |
 |      .. _ClustalW: http://www.clustal.org/
 |      .. _STAMP: http://www.compbio.dundee.ac.uk/manuals/stamp.4.2/
 |
 |
 |      See Also
 |      --------
 |      rmsd
 |
 |
 |      .. versionadded:: 0.7.7
 |      .. versionchanged:: 0.8
 |         `groupselections` added
 |      .. versionchanged:: 0.16.0
 |         Flexible weighting scheme with new `weights` keyword.
 |      .. deprecated:: 0.16.0
 |         Instead of ``mass_weighted=True`` (removal in 0.17.0) use new
 |         ``weights='mass'``; refactored to fit with AnalysisBase API
 |      .. versionchanged:: 0.17.0
 |         removed deprecated `mass_weighted` keyword; `groupselections`
 |         are *not* rotationally superimposed any more.
 |      .. deprecated:: 0.19.0
 |         `filename` will be removed in 1.0
 |
 |  save(*args, **kwds)
 |      `save` is deprecated!
 |
 |      Save RMSD from :attr:`RMSD.rmsd` to text file *filename*.
 |
 |      Parameters
 |      ----------
 |      filename : str (optional)
 |          if no filename is given the default provided to the constructor is
 |          used.
 |
 |
 |
 |
 |
 |      .. deprecated:: 0.19.0
 |         You can instead use ``np.savetxt(filename, RMSD.rmsd)``.
 |         `save` will be removed in release 1.0.0.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from MDAnalysis.analysis.base.AnalysisBase:
 |
 |  run(self, start=None, stop=None, step=None, verbose=None)
 |      Perform the calculation
 |
 |      Parameters
 |      ----------
 |      start : int, optional
 |          start frame of analysis
 |      stop : int, optional
 |          stop frame of analysis
 |      step : int, optional
 |          number of frames to skip between each analysed frame
 |      verbose : bool, optional
 |          Turn on verbosity
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from MDAnalysis.analysis.base.AnalysisBase:
 |
 |  __dict__
 |      dictionary for instance variables (if defined)
 |
 |  __weakref__
 |      list of weak references to the object (if defined)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ca</span> <span class="o">=</span> <span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'protein and name CA'</span><span class="p">)</span>

<span class="n">R</span> <span class="o">=</span> <span class="n">RMSD</span><span class="p">(</span><span class="n">ca</span><span class="p">)</span>
<span class="n">R</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;MDAnalysis.analysis.rms.RMSD at 0x7f01b9d9d668&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">ca_rmsd</span> <span class="o">=</span> <span class="n">R</span><span class="p">.</span><span class="n">rmsd</span><span class="p">.</span><span class="n">T</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">ca_rmsd</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'time (ps)'</span><span class="p">);</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'RMSD (Ã…)'</span><span class="p">);</span>
<span class="n">ca_rmsd</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2.6076733666407134e-07
</code></pre></div></div>

<p><img src="output_59_1.png" alt="png" /></p>

<p>Compute the RMSD for the following trajectory <code class="language-plaintext highlighter-rouge">neDCD = 'adk_equilibrium/adk_dims.dcd' </code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">neDCD</span> <span class="o">=</span> <span class="s">'adk_equilibrium/adk_dims.dcd'</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">u_ne</span> <span class="o">=</span> <span class="n">mda</span><span class="p">.</span><span class="n">Universe</span><span class="p">(</span><span class="n">PSF</span><span class="p">,</span> <span class="n">neDCD</span><span class="p">,</span> <span class="n">in_memory</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ca2</span> <span class="o">=</span> <span class="n">u_ne</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'protein and name CA'</span><span class="p">)</span>

<span class="n">R2</span> <span class="o">=</span> <span class="n">RMSD</span><span class="p">(</span><span class="n">ca2</span><span class="p">)</span>
<span class="n">R2</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;MDAnalysis.analysis.rms.RMSD at 0x7f01b9d3e780&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">ca_rmsd</span> <span class="o">=</span> <span class="n">R2</span><span class="p">.</span><span class="n">rmsd</span><span class="p">.</span><span class="n">T</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">ca_rmsd</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'time (ps)'</span><span class="p">);</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'RMSD (Ã…)'</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="output_64_0.png" alt="png" /></p>

<h2 id="rmsf">RMSF</h2>

<p>The RMSF is an equilibrium quantity that tells us how a certain atom fluctuates around its average position.</p>

\[RMSF_i = \sqrt{ \langle (r_i - \langle r_i \rangle)^2 \rangle}\]

<p>Of course we have a built-in class.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">MDAnalysis.analysis.rms</span> <span class="kn">import</span> <span class="n">RMSF</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">protein_heavy</span> <span class="o">=</span> <span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"protein and name CA"</span><span class="p">)</span>
<span class="n">myRMSF</span> <span class="o">=</span> <span class="n">RMSF</span><span class="p">(</span><span class="n">protein_heavy</span><span class="p">).</span><span class="n">run</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">myRMSF</span><span class="p">.</span><span class="n">rmsf</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[&lt;matplotlib.lines.Line2D at 0x7f01b30d7198&gt;]
</code></pre></div></div>

<p><img src="output_68_1.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#help(RMSF)
</span></code></pre></div></div>

<p>We need to align the trajectory to a reference frame. We will use the open conformation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">MDAnalysis.analysis</span> <span class="kn">import</span> <span class="n">align</span>

<span class="c1"># Loading the structure
</span><span class="n">PDB_open</span> <span class="o">=</span> <span class="s">'adk_equilibrium/adk_open.pdb'</span>
<span class="n">open_uni</span> <span class="o">=</span> <span class="n">mda</span><span class="p">.</span><span class="n">Universe</span><span class="p">(</span><span class="n">PSF</span><span class="p">,</span> <span class="n">PDB_open</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's define a selection for the equilibrium universe
</span><span class="n">protein</span> <span class="o">=</span> <span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'protein'</span><span class="p">)</span>

<span class="c1"># we PRE-align the structure
</span><span class="n">prealigner</span> <span class="o">=</span> <span class="n">align</span><span class="p">.</span><span class="n">AlignTraj</span><span class="p">(</span><span class="n">mobile</span><span class="o">=</span><span class="n">mobile</span><span class="p">,</span> <span class="n">reference</span><span class="o">=</span><span class="n">open_uni</span><span class="p">,</span>
                             <span class="n">select</span><span class="o">=</span><span class="s">"protein and name CA"</span><span class="p">,</span> <span class="n">in_memory</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">run</span><span class="p">()</span>

<span class="c1"># Creating the reference (average) structure
</span><span class="n">reference_coordinates</span> <span class="o">=</span> <span class="n">mobile</span><span class="p">.</span><span class="n">trajectory</span><span class="p">.</span><span class="n">timeseries</span><span class="p">(</span><span class="n">asel</span><span class="o">=</span><span class="n">protein</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1000</span><span class="p">).</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># make a reference structure (need to reshape into a 1-frame "trajectory")
</span><span class="n">reference</span> <span class="o">=</span> <span class="n">mda</span><span class="p">.</span><span class="n">Merge</span><span class="p">(</span><span class="n">protein</span><span class="p">).</span><span class="n">load_new</span><span class="p">(</span>
            <span class="n">reference_coordinates</span><span class="p">[:,</span> <span class="bp">None</span><span class="p">,</span> <span class="p">:],</span> <span class="n">order</span><span class="o">=</span><span class="s">"afc"</span><span class="p">)</span>

<span class="c1">#order afc is the way it returns the data array: a-tom, f-rame, c-oordinates
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aligner</span> <span class="o">=</span> <span class="n">align</span><span class="p">.</span><span class="n">AlignTraj</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">reference</span><span class="p">,</span> <span class="n">select</span><span class="o">=</span><span class="s">"protein and name CA"</span><span class="p">,</span> <span class="n">in_memory</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">run</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">calphas</span> <span class="o">=</span> <span class="n">protein</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"name CA"</span><span class="p">)</span>
<span class="n">rmsfer</span> <span class="o">=</span> <span class="n">RMSF</span><span class="p">(</span><span class="n">calphas</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="n">run</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Step  3187/3187 [100.0%]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">calphas</span><span class="p">.</span><span class="n">resids</span><span class="p">,</span> <span class="n">rmsfer</span><span class="p">.</span><span class="n">rmsf</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[&lt;matplotlib.lines.Line2D at 0x7f01ba0dd978&gt;]
</code></pre></div></div>

<p><img src="output_75_1.png" alt="png" /></p>

<p>Now we want to store the RMSF value in the beta field of a pdb.
We can write the</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">open_uni</span><span class="p">.</span><span class="n">add_TopologyAttr</span><span class="p">(</span><span class="n">mda</span><span class="p">.</span><span class="n">core</span><span class="p">.</span><span class="n">topologyattrs</span><span class="p">.</span><span class="n">Tempfactors</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">u</span><span class="p">.</span><span class="n">atoms</span><span class="p">))))</span>
<span class="n">protein</span> <span class="o">=</span> <span class="n">open_uni</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"protein"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">len</span><span class="p">(</span><span class="n">protein</span><span class="p">.</span><span class="n">residues</span><span class="p">)</span>
<span class="nb">len</span><span class="p">(</span><span class="n">rmsfer</span><span class="p">.</span><span class="n">rmsf</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>214
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">residue</span><span class="p">,</span> <span class="n">beta</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">protein</span><span class="p">.</span><span class="n">residues</span><span class="p">,</span> <span class="n">rmsfer</span><span class="p">.</span><span class="n">rmsf</span><span class="p">):</span>
    <span class="n">residue</span><span class="p">.</span><span class="n">atoms</span><span class="p">.</span><span class="n">tempfactors</span> <span class="o">=</span> <span class="n">beta</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">protein</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"protein_with_bfactors.pdb"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/home/jarvis/anaconda2/envs/py3/lib/python3.6/site-packages/MDAnalysis/coordinates/PDB.py:902: UserWarning: Found no information for attr: 'altLocs' Using default value of ' '
  "".format(attrname, default))
/home/jarvis/anaconda2/envs/py3/lib/python3.6/site-packages/MDAnalysis/coordinates/PDB.py:902: UserWarning: Found no information for attr: 'icodes' Using default value of ' '
  "".format(attrname, default))
/home/jarvis/anaconda2/envs/py3/lib/python3.6/site-packages/MDAnalysis/coordinates/PDB.py:902: UserWarning: Found no information for attr: 'occupancies' Using default value of '1.0'
  "".format(attrname, default))
</code></pre></div></div>

<h2 id="radius-of-gyration">Radius of gyration</h2>

<p>We already saw the radius of gyration:</p>

\[R_\mathrm{gyr} = \sqrt{\frac{1}{M}\sum_{i=1}^{N} m_i(\mathbf{r}_i - \mathbf{R})^2}\]

<p>where $\mathbf{R}$ is the center of mass.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">protein</span> <span class="o">=</span> <span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"protein"</span><span class="p">)</span>
</code></pre></div></div>

<p>Letâ€™s investigate the methods for the <code class="language-plaintext highlighter-rouge">AtomGroup</code> <code class="language-plaintext highlighter-rouge">protein</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rg</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">times</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">ts</span> <span class="ow">in</span> <span class="n">mobile</span><span class="p">.</span><span class="n">trajectory</span><span class="p">:</span>
    <span class="n">rg</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">protein</span><span class="p">.</span><span class="n">radius_of_gyration</span><span class="p">())</span>
    <span class="n">times</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ts</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>
<span class="n">rg</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">rg</span><span class="p">)</span>
<span class="n">times</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">times</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">times</span><span class="p">,</span> <span class="n">rg</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Radius of gyration'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"time (ps)"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="sa">r</span><span class="s">"$R_G$ (Ã…)"</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="output_85_0.png" alt="png" /></p>

<p>The radius of gyration behaves like the RMSD, and this is also an hint of how the equilibration can be considered reached.</p>

<p>Do the same for the <code class="language-plaintext highlighter-rouge">ne_universe</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">protein</span> <span class="o">=</span> <span class="n">u_ne</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"protein"</span><span class="p">)</span>
</code></pre></div></div>

<p>Letâ€™s investigate the methods for the <code class="language-plaintext highlighter-rouge">AtomGroup</code> <code class="language-plaintext highlighter-rouge">protein</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rg</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">times</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">ts</span> <span class="ow">in</span> <span class="n">u_ne</span><span class="p">.</span><span class="n">trajectory</span><span class="p">:</span>
    <span class="n">rg</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">protein</span><span class="p">.</span><span class="n">radius_of_gyration</span><span class="p">())</span>
    <span class="n">times</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ts</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>
<span class="n">rg</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">rg</span><span class="p">)</span>
<span class="n">times</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">times</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">times</span><span class="p">,</span> <span class="n">rg</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Radius of gyration'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"time (ps)"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="sa">r</span><span class="s">"$R_G$ (Ã…)"</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="output_91_0.png" alt="png" /></p>

<h2 id="contact-map">Contact map</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">MDAnalysis.lib</span> <span class="kn">import</span> <span class="n">distances</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CÎ±</span> <span class="o">=</span> <span class="n">open_uni</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">'name CA'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d_CaCa</span> <span class="o">=</span> <span class="n">distances</span><span class="p">.</span><span class="n">distance_array</span><span class="p">(</span><span class="n">CÎ±</span><span class="p">.</span><span class="n">positions</span><span class="p">,</span> <span class="n">CÎ±</span><span class="p">.</span><span class="n">positions</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">img</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">d_CaCa</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="output_96_0.png" alt="png" /></p>

<h2 id="distances">Distances</h2>

<p>Experimental FRET labels: distances</p>

<p><img src="./fret_distances_adk.png" alt="FRET distances" /></p>

<ul>
  <li>I52 - K145</li>
  <li>A55 - V169</li>
  <li>A127 - A194</li>
</ul>

<p>Calculate the C$_\beta$ distances as proxies for the spin-label distances.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">donors</span> <span class="o">=</span> <span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"name CB"</span><span class="p">).</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"resname ILE and resid 52"</span><span class="p">,</span>
                                           <span class="s">"resname ALA and resid 55"</span><span class="p">,</span>
                                           <span class="s">"resname ALA and resid 127"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">acceptors</span> <span class="o">=</span> <span class="n">mobile</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"name CB"</span><span class="p">).</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"resname LYS and resid 145"</span><span class="p">,</span>
                                       <span class="s">"resname VAL and resid 169"</span><span class="p">,</span>
                                       <span class="s">"resname ALA and resid 194"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span> <span class="o">=</span> <span class="n">donors</span><span class="p">.</span><span class="n">positions</span> <span class="o">-</span> <span class="n">acceptors</span><span class="p">.</span><span class="n">positions</span>
<span class="n">r</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[ 20.777103,   7.352953, -23.57818 ],
       [ -8.003485,  -8.776337,  -8.839368],
       [ -9.672781, -28.934841,  -9.881233]], dtype=float32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([32.27514 , 14.805887, 32.069088], dtype=float32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">FRETdist</span><span class="p">(</span><span class="n">donors</span><span class="p">,</span> <span class="n">acceptors</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">donors</span><span class="p">.</span><span class="n">positions</span> <span class="o">-</span> <span class="n">acceptors</span><span class="p">.</span><span class="n">positions</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FRETdist</span><span class="p">(</span><span class="n">donors</span><span class="p">,</span> <span class="n">acceptors</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([32.27514 , 14.805887, 32.069088], dtype=float32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">distances</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">times</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">ts</span> <span class="ow">in</span> <span class="n">mobile</span><span class="p">.</span><span class="n">trajectory</span><span class="p">:</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">FRETdist</span><span class="p">(</span><span class="n">donors</span><span class="p">,</span> <span class="n">acceptors</span><span class="p">)</span>
    <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
    <span class="n">times</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ts</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>
<span class="n">distances</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">)</span>
<span class="n">times</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">times</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">times</span><span class="p">,</span> <span class="n">distances</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">((</span><span class="s">"I52-K145"</span><span class="p">,</span> <span class="s">"A55-V169"</span><span class="p">,</span> <span class="s">"A127-A194"</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"time (ps)"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="sa">r</span><span class="s">"distance (Ã…)"</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="output_106_0.png" alt="png" /></p>

<p>For the non-equilibrium trajectory:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">donors</span> <span class="o">=</span> <span class="n">u_ne</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"name CB"</span><span class="p">).</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"resname ILE and resid 52"</span><span class="p">,</span>
                                           <span class="s">"resname ALA and resid 55"</span><span class="p">,</span>
                                           <span class="s">"resname ALA and resid 127"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">acceptors</span> <span class="o">=</span> <span class="n">u_ne</span><span class="p">.</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"name CB"</span><span class="p">).</span><span class="n">select_atoms</span><span class="p">(</span><span class="s">"resname LYS and resid 145"</span><span class="p">,</span>
                                       <span class="s">"resname VAL and resid 169"</span><span class="p">,</span>
                                       <span class="s">"resname ALA and resid 194"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span> <span class="o">=</span> <span class="n">donors</span><span class="p">.</span><span class="n">positions</span> <span class="o">-</span> <span class="n">acceptors</span><span class="p">.</span><span class="n">positions</span>
<span class="n">r</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[ 18.454721 , -20.825457 ,  13.870202 ],
       [ -5.15199  ,  -7.7556076,  -8.505607 ],
       [-22.466576 , -18.11174  , -13.550823 ]], dtype=float32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([31.091139, 12.611019, 31.881138], dtype=float32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">FRETdist</span><span class="p">(</span><span class="n">donors</span><span class="p">,</span> <span class="n">acceptors</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">donors</span><span class="p">.</span><span class="n">positions</span> <span class="o">-</span> <span class="n">acceptors</span><span class="p">.</span><span class="n">positions</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FRETdist</span><span class="p">(</span><span class="n">donors</span><span class="p">,</span> <span class="n">acceptors</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([31.091139, 12.611019, 31.881138], dtype=float32)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">distances</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">times</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">ts</span> <span class="ow">in</span> <span class="n">u_ne</span><span class="p">.</span><span class="n">trajectory</span><span class="p">:</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">FRETdist</span><span class="p">(</span><span class="n">donors</span><span class="p">,</span> <span class="n">acceptors</span><span class="p">)</span>
    <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
    <span class="n">times</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">ts</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>
<span class="n">distances</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">)</span>
<span class="n">times</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">times</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">times</span><span class="p">,</span> <span class="n">distances</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">((</span><span class="s">"I52-K145"</span><span class="p">,</span> <span class="s">"A55-V169"</span><span class="p">,</span> <span class="s">"A127-A194"</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"time (ps)"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="sa">r</span><span class="s">"distance (Ã…)"</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="output_115_0.png" alt="png" /></p>

:ET